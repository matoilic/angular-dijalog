{"version":3,"sources":["angular-dijalog.js"],"names":["AngularDijalog","$compile","$templateRequest","$q","$rootScope","this","$defaultScope","dijalogProvider","setTheme","t","theme","$get","dijalog","prototype","alert","options","$scope","substr","message","_dijalog","close","id","confirm","_createButton","positive","label","base","defaultDialogOptions","buttons","helpers","assign","text","createNoButton","createYesButton","prompt","_renderTemplate","templateUrl","variables","deferred","defer","_this","then","response","resolve","_renderTemplateString","promise","template","compiledTemplate","childScope","$new","node","scope","dialogType","renderedTemplate","originalAfterClose","afterClose","renderingDefer","childScopes","templateRequests","className","messageTemplate","push","messageTemplateVariables","result","messageTemplateString","inputTemplate","inputTemplateVariables","input","inputTemplateString","all","forEach","$destroy","apply","dijalogModule","angular","module","provider","define","amd","dj","dijaalog","exports","require","window"],"mappings":"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","file":"angular-dijalog.min.js","sourcesContent":["/* global angular */\n/* global define */\n/* global dijalog */\n\n(function() {\n    var theme = 'dijalog-theme-default';\n    var dijalog;\n\n    function AngularDijalog($compile, $templateRequest, $q, $rootScope) {\n        this.$compile = $compile;\n        this.$templateRequest = $templateRequest;\n        this.$q = $q;\n        this.$defaultScope = $rootScope;\n    }\n\n    AngularDijalog.prototype = {\n        alert: function(options, $scope) {\n            if (options && options.substr) {\n                options = {\n                    message: options\n                };\n            }\n\n            this._dijalog('alert', options, $scope || this.$defaultScope);\n        },\n\n        close: function(id) {\n            dijalog.close(id);\n        },\n\n        confirm: function(options, $scope) {\n            this._dijalog('confirm', options, $scope || this.$defaultScope);\n        },\n\n        _createButton: function(positive, label, options) {\n            var base = dijalog.defaultDialogOptions.buttons[positive ? 0 : 1];\n\n            return dijalog.helpers.assign({}, base, {text: label}, options || {});\n        },\n\n        createNoButton: function(label, options) {\n            return this._createButton(false, label, options);\n        },\n\n        createYesButton: function(label, options) {\n            return this._createButton(true, label, options);\n        },\n\n        prompt: function(options, $scope) {\n            this._dijalog('prompt', options, $scope || this.$defaultScope);\n        },\n\n        _renderTemplate: function(templateUrl, $scope, variables) {\n            var deferred = this.$q.defer();\n            var _this = this;\n\n            this.$templateRequest(templateUrl, false).then(function(response) {\n                deferred.resolve(_this._renderTemplateString(response, $scope, variables));\n            });\n\n            return deferred.promise;\n        },\n\n        _renderTemplateString: function(template, $scope, variables) {\n            var compiledTemplate = this.$compile(template);\n            var childScope = $scope.$new();\n\n            childScope = dijalog.helpers.assign(childScope, variables || {});\n\n            return {\n                node: compiledTemplate(childScope)[0],\n                scope: childScope\n            };\n        },\n\n        _dijalog: function(dialogType, options, $scope) {\n            var originalAfterClose = options.afterClose;\n            var renderingDefer = this.$q.defer();\n            var childScopes = [];\n            var templateRequests = [renderingDefer.promise];\n            var renderedTemplate;\n\n            options.className = (options.className || '') + ' ' + theme;\n\n            if (options.messageTemplate) {\n                templateRequests.push(\n                    this\n                        ._renderTemplate(options.messageTemplate, $scope, options.messageTemplateVariables)\n                        .then(function(result) {\n                            options.message = result.node;\n                            childScopes.push(result.scope);\n                        })\n                );\n            } else if (options.messageTemplateString) {\n                renderedTemplate = this._renderTemplateString(\n                    options.messageTemplateString,\n                    $scope,\n                    options.messageTemplateVariables\n                );\n\n                options.message = renderedTemplate.node;\n                childScopes.push(renderedTemplate.scope);\n            }\n\n            if (options.inputTemplate) {\n                templateRequests.push(\n                    this\n                        ._renderTemplate(options.inputTemplate, $scope, options.inputTemplateVariables)\n                        .then(function(result) {\n                            options.input = result.node;\n                            childScopes.push(result.scope);\n                        })\n                );\n            } else if (options.inputTemplateString) {\n                renderedTemplate = this._renderTemplateString(\n                    options.inputTemplateString,\n                    $scope,\n                    options.inputTemplateVariables\n                );\n\n                options.input = renderedTemplate.node;\n                childScopes.push(renderedTemplate.scope);\n            }\n\n            this.$q.all(templateRequests).then(function() {\n                options.afterClose = function() {\n                    childScopes.forEach(function(scope) {\n                        scope.$destroy();\n                    });\n\n                    if (originalAfterClose) {\n                        originalAfterClose.apply();\n                    }\n                };\n\n                dijalog[dialogType](options);\n            });\n\n            renderingDefer.resolve();\n        }\n    };\n\n    function dijalogProvider() {\n        this.setTheme = function(t) {\n            theme = t;\n        };\n\n        this.$get = [\n            '$compile',\n            '$templateRequest',\n            '$q',\n            '$rootScope',\n            function($compile, $templateRequest, $q, $rootScope) {\n                return new AngularDijalog($compile, $templateRequest, $q, $rootScope);\n            }\n        ];\n    }\n\n    var dijalogModule = angular\n        .module('dijalog', [])\n        .provider('dijalog', [dijalogProvider]);\n\n    if(typeof define === 'function' && define.amd) {\n        define(['dijalog'], function(dj) {\n            dijaalog = dj;\n\n            return dijalogModule;\n        });\n    } else if(typeof exports === 'object') {\n        dijalog = require('dijalog');\n        module.exports = dijalogModule;\n    } else {\n      dijalog = window.dijalog;\n    }\n})();\n"],"sourceRoot":"/source/"}