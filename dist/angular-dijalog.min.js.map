{"version":3,"sources":["angular-dijalog.js"],"names":["AngularDijalog","$compile","$templateRequest","$q","$rootScope","this","$defaultScope","dijalogProvider","setTheme","t","theme","$get","prototype","alert","options","$scope","substr","message","_dijalog","close","id","dijalog","confirm","_createButton","positive","label","base","defaultDialogOptions","buttons","helpers","assign","text","createNoButton","createYesButton","prompt","_renderTemplate","templateUrl","variables","deferred","defer","_this","then","response","resolve","_renderTemplateString","promise","template","compiledTemplate","childScope","$new","node","scope","dialogType","renderedTemplate","originalAfterClose","afterClose","renderingDefer","childScopes","templateRequests","className","messageTemplate","push","messageTemplateVariables","result","messageTemplateString","inputTemplate","inputTemplateVariables","input","inputTemplateString","all","forEach","$destroy","apply","angular","module","provider","define","amd","exports"],"mappings":"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","file":"angular-dijalog.min.js","sourcesContent":["/* global angular */\n/* global define */\n/* global dijalog */\n\n(function() {\n    var theme = 'dijalog-theme-default';\n\n    function AngularDijalog($compile, $templateRequest, $q, $rootScope) {\n        this.$compile = $compile;\n        this.$templateRequest = $templateRequest;\n        this.$q = $q;\n        this.$defaultScope = $rootScope;\n    }\n\n    AngularDijalog.prototype = {\n        alert: function(options, $scope) {\n            if (options && options.substr) {\n                options = {\n                    message: options\n                };\n            }\n\n            this._dijalog('alert', options, $scope || this.$defaultScope);\n        },\n\n        close: function(id) {\n            dijalog.close(id);\n        },\n\n        confirm: function(options, $scope) {\n            this._dijalog('confirm', options, $scope || this.$defaultScope);\n        },\n\n        _createButton: function(positive, label, options) {\n            var base = dijalog.defaultDialogOptions.buttons[positive ? 0 : 1];\n\n            return dijalog.helpers.assign({}, base, {text: label}, options || {});\n        },\n\n        createNoButton: function(label, options) {\n            return this._createButton(false, label, options);\n        },\n\n        createYesButton: function(label, options) {\n            return this._createButton(true, label, options);\n        },\n\n        prompt: function(options, $scope) {\n            this._dijalog('prompt', options, $scope || this.$defaultScope);\n        },\n\n        _renderTemplate: function(templateUrl, $scope, variables) {\n            var deferred = this.$q.defer();\n            var _this = this;\n\n            this.$templateRequest(templateUrl, false).then(function(response) {\n                deferred.resolve(_this._renderTemplateString(response, $scope, variables));\n            });\n\n            return deferred.promise;\n        },\n\n        _renderTemplateString: function(template, $scope, variables) {\n            var compiledTemplate = this.$compile(template);\n            var childScope = $scope.$new();\n\n            childScope = dijalog.helpers.assign(childScope, variables || {});\n\n            return {\n                node: compiledTemplate(childScope)[0],\n                scope: childScope\n            };\n        },\n\n        _dijalog: function(dialogType, options, $scope) {\n            var originalAfterClose = options.afterClose;\n            var renderingDefer = this.$q.defer();\n            var childScopes = [];\n            var templateRequests = [renderingDefer.promise];\n            var renderedTemplate;\n\n            options.className = (options.className || '') + ' ' + theme;\n\n            if (options.messageTemplate) {\n                templateRequests.push(\n                    this\n                        ._renderTemplate(options.messageTemplate, $scope, options.messageTemplateVariables)\n                        .then(function(result) {\n                            options.message = result.node;\n                            childScopes.push(result.scope);\n                        })\n                );\n            } else if (options.messageTemplateString) {\n                renderedTemplate = this._renderTemplateString(\n                    options.messageTemplateString,\n                    $scope,\n                    options.messageTemplateVariables\n                );\n\n                options.message = renderedTemplate.node;\n                childScopes.push(renderedTemplate.scope);\n            }\n\n            if (options.inputTemplate) {\n                templateRequests.push(\n                    this\n                        ._renderTemplate(options.inputTemplate, $scope, options.inputTemplateVariables)\n                        .then(function(result) {\n                            options.input = result.node;\n                            childScopes.push(result.scope);\n                        })\n                );\n            } else if (options.inputTemplateString) {\n                renderedTemplate = this._renderTemplateString(\n                    options.inputTemplateString,\n                    $scope,\n                    options.inputTemplateVariables\n                );\n\n                options.input = renderedTemplate.node;\n                childScopes.push(renderedTemplate.scope);\n            }\n\n            this.$q.all(templateRequests).then(function() {\n                options.afterClose = function() {\n                    childScopes.forEach(function(scope) {\n                        scope.$destroy();\n                    });\n\n                    if (originalAfterClose) {\n                        originalAfterClose.apply();\n                    }\n                };\n\n                dijalog[dialogType](options);\n            });\n\n            renderingDefer.resolve();\n        }\n    };\n\n    function dijalogProvider() {\n        this.setTheme = function(t) {\n            theme = t;\n        };\n\n        this.$get = [\n            '$compile',\n            '$templateRequest',\n            '$q',\n            '$rootScope',\n            function($compile, $templateRequest, $q, $rootScope) {\n                return new AngularDijalog($compile, $templateRequest, $q, $rootScope);\n            }\n        ];\n    }\n\n    angular\n        .module('dijalog', [])\n        .provider('dijalog', [dijalogProvider]);\n\n    if(typeof define === 'function' && define.amd) {\n        define(function() {\n            return 'dijalog';\n        });\n    } else if(typeof exports === 'object') {\n        module.exports = 'dijalog';\n    }\n})();\n"],"sourceRoot":"/source/"}